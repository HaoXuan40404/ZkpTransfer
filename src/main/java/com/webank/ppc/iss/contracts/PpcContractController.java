package com.webank.ppc.iss.contracts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class PpcContractController extends Contract {
    public static final String[] BINARY_ARRAY = {"","57600080fd5b610b65868387016109d5565b93506020850135915080821115610b7b57600080fd5b50610a8585828601610a8f565b600080600060608486031215610b9d57600080fd5b833567ffffffffffffffff80821115610bb557600080fd5b610bc1878388016109d5565b94506020860135915080821115610bd757600080fd5b610be387838801610a8f565b93506040860135915080821115610bf957600080fd5b50610c0686828701610a8f565b9150509250925092565b60005b83811015610c2b578181015183820152602001610c13565b838111156103f25750506000910152565b60008151808452610c54816020860160208601610c10565b601f01601f19169290920160200192915050565b602081526000610c7b6020830184610c3c565b9392505050565b60008060008060008060c08789031215610c9b57600080fd5b863567ffffffffffffffff80821115610cb357600080fd5b610cbf8a838b016109d5565b97506020890135915080821115610cd557600080fd5b610ce18a838b016109d5565b96506040890135915080821115610cf757600080fd5b610d038a838b01610a8f565b95506060890135915080821115610d1957600080fd5b610d258a838b01610a8f565b94506080890135915080821115610d3b57600080fd5b610d478a838b016109d5565b935060a0890135915080821115610d5d57600080fd5b50610d6a89828a016109d5565b9150509295509295509295565b600080600060608486031215610d8c57600080fd5b833567ffffffffffffffff80821115610da457600080fd5b610db0878388016109d5565b94506020860135915080821115610dc657600080fd5b610dd2878388016109d5565b93506040860135915080821115610de857600080fd5b50610c06868287016109d5565b60008060008060808587031215610e0b57600080fd5b843567ffffffffffffffff80821115610e2357600080fd5b610e2f888389016109d5565b95506020870135915080821115610e4557600080fd5b610e51888389016109d5565b94506040870135915080821115610e6757600080fd5b610e7388838901610a8f565b93506060870135915080821115610e8957600080fd5b50610e9687828801610a8f565b91505092959194509250565b600060208284031215610eb457600080fd5b813567ffffffffffffffff811115610ecb57600080fd5b6107fe848285016109d5565b60008060008060008060c08789031215610ef057600080fd5b863567ffffffffffffffff80821115610f0857600080fd5b610f148a838b016109d5565b97506020890135915080821115610f2a57600080fd5b610f368a838b016109d5565b96506040890135915080821115610f4c57600080fd5b610f588a838b016109d5565b95506060890135915080821115610f6e57600080fd5b610d258a838b016109d5565b604081526000610f8d6040830185610c3c565b8281036020840152610f9f8185610c3c565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610fe057634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215610ff957600080fd5b81518015158114610c7b57600080fd5b60608152600061101c6060830186610c3c565b828103602084015261102e8186610c3c565b905082810360408401526110428185610c3c565b9695505050505050565b60006020828403121561105e57600080fd5b815167ffffffffffffffff81111561107557600080fd5b8201601f8101841361108657600080fd5b80516110946109f4826109ad565b8181528560208385010111156110a957600080fd5b610f9f826020830160208601610c10565b600082516110cc818460208701610c10565b919091019291505056fea2646970667358221220913cf287e2e8d9be90f168555129616cf0083c9696711961d5e99701eea564a864736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","0135915080821115610b6457600080fd5b50610b7187828801610a31565b91505092959194509250565b60008060408385031215610b9057600080fd5b823567ffffffffffffffff80821115610ba857600080fd5b610bb4868387016109db565b93506020850135915080821115610bca57600080fd5b50610bd7858286016109db565b9150509250929050565b600080600060608486031215610bf657600080fd5b833567ffffffffffffffff80821115610c0e57600080fd5b610c1a878388016109db565b94506020860135915080821115610c3057600080fd5b610c3c878388016109db565b93506040860135915080821115610c5257600080fd5b50610c5f868287016109db565b9150509250925092565b600060208284031215610c7b57600080fd5b813567ffffffffffffffff811115610c9257600080fd5b610791848285016109db565b60008060008060008060c08789031215610cb757600080fd5b863567ffffffffffffffff80821115610ccf57600080fd5b610cdb8a838b016109db565b97506020890135915080821115610cf157600080fd5b610cfd8a838b016109db565b96506040890135915080821115610d1357600080fd5b610d1f8a838b01610a31565b95506060890135915080821115610d3557600080fd5b610d418a838b01610a31565b94506080890135915080821115610d5757600080fd5b610d638a838b016109db565b935060a0890135915080821115610d7957600080fd5b50610d8689828a016109db565b9150509295509295509295565b60005b83811015610dae578181015183820152602001610d96565b838111156106b35750506000910152565b60008151808452610dd7816020860160208601610d93565b601f01601f19169290920160200192915050565b602081526000610dfe6020830184610dbf565b9392505050565b600080600060608486031215610e1a57600080fd5b833567ffffffffffffffff80821115610e3257600080fd5b610e3e878388016109db565b94506020860135915080821115610e5457600080fd5b610e6087838801610a31565b93506040860135915080821115610e7657600080fd5b50610c5f86828701610a31565b60008060008060008060c08789031215610e9c57600080fd5b863567ffffffffffffffff80821115610eb457600080fd5b610ec08a838b016109db565b97506020890135915080821115610ed657600080fd5b610ee28a838b016109db565b96506040890135915080821115610ef857600080fd5b610f048a838b016109db565b95506060890135915080821115610f1a57600080fd5b610d418a838b016109db565b60008060408385031215610f3957600080fd5b823567ffffffffffffffff80821115610f5157600080fd5b610f5d868387016109db565b93506020850135915080821115610f7357600080fd5b50610bd785828601610a31565b63b95aa35560e01b600052603260045260246000fd5b6000600019821415610fb85763b95aa35560e01b600052601160045260246000fd5b5060010190565b604081526000610fd26040830185610dbf565b8281036020840152610fe48185610dbf565b95945050505050565b600060208284031215610fff57600080fd5b81518015158114610dfe57600080fd5b6060815260006110226060830186610dbf565b82810360208401526110348186610dbf565b905082810360408401526110488185610dbf565b9695505050505050565b60008251611064818460208701610d93565b9190910192915050565b60006020828403121561108057600080fd5b815167ffffffffffffffff81111561109757600080fd5b8201601f810184136110a857600080fd5b80516110b66109fa826109b3565b8181528560208385010111156110cb57600080fd5b610fe4826020830160208601610d9356fea2646970667358221220053e85b6475367fd769a70a4847152c4151c6012b488b0fee7bc240b3529a96264736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"d_dataset_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"d_authorization_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"d_authorization_request_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"d_algorithm_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"d_job_audit_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"d_agency_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"d_dataset_job_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"d_algorithm_job_address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"jobId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"eventData\",\"type\":\"string\"}],\"name\":\"delegateJobEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metaKey\",\"type\":\"string\"}],\"name\":\"removeMetaEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metaKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metaValue\",\"type\":\"string\"}],\"name\":\"updateMetaEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metaKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metaValue\",\"type\":\"string\"}],\"name\":\"uploadMetaEvent\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[],\"name\":\"ERROR_OTHER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"selector\":[829999359,1590417820],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":5}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"jobId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"eventData\",\"type\":\"string\"}],\"name\":\"delegateJob\",\"outputs\":[],\"selector\":[3271861980,600261651],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"}],\"name\":\"getTableNameContract\",\"outputs\":[{\"internalType\":\"contract PpcMeta\",\"name\":\"\",\"type\":\"address\"}],\"selector\":[2948272431,1067278680],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaKey\",\"type\":\"string\"}],\"name\":\"queryMeta\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"selector\":[2932719200,3486656775],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaKey\",\"type\":\"string\"}],\"name\":\"removeMeta\",\"outputs\":[],\"selector\":[438369712,4138523253],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaKeyList\",\"type\":\"string[]\"}],\"name\":\"removeMetaWithMultiKey\",\"outputs\":[],\"selector\":[447235347,2959480899],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tableName2\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaKeyList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaValueList\",\"type\":\"string[]\"}],\"name\":\"updateAndRemoveMultiMetaWithoutCheck\",\"outputs\":[],\"selector\":[2160001487,208749887],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaValue\",\"type\":\"string\"}],\"name\":\"updateMeta\",\"outputs\":[],\"selector\":[2328244377,4134907076],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaKeyList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaValueList\",\"type\":\"string[]\"}],\"name\":\"updateMetaWithMultiKey\",\"outputs\":[],\"selector\":[581906910,3819098797],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaKeyList\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaValueList\",\"type\":\"string[]\"}],\"name\":\"updateMultiMetaWithoutCheck\",\"outputs\":[],\"selector\":[3226544061,1787468787],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tableName2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaKey1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaKey2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaValue1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaValue2\",\"type\":\"string\"}],\"name\":\"updateTwoMeta\",\"outputs\":[],\"selector\":[4206092128,2275859122],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tableName2\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"metaKeyList1\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"metaKeyList2\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"metaValue1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaValue2\",\"type\":\"string\"}],\"name\":\"updateTwoMetaWithMultiKey\",\"outputs\":[],\"selector\":[1627277255,1253701296],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaValue\",\"type\":\"string\"}],\"name\":\"uploadMeta\",\"outputs\":[],\"selector\":[2631640758,1734177823],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"tableName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaKey\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metaValue\",\"type\":\"string\"}],\"name\":\"uploadMetaWithoutCheck\",\"outputs\":[],\"selector\":[1800334937,796296190],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ERROR_OTHER = "ERROR_OTHER";

    public static final String FUNC_DELEGATEJOB = "delegateJob";

    public static final String FUNC_GETTABLENAMECONTRACT = "getTableNameContract";

    public static final String FUNC_QUERYMETA = "queryMeta";

    public static final String FUNC_REMOVEMETA = "removeMeta";

    public static final String FUNC_REMOVEMETAWITHMULTIKEY = "removeMetaWithMultiKey";

    public static final String FUNC_UPDATEANDREMOVEMULTIMETAWITHOUTCHECK = "updateAndRemoveMultiMetaWithoutCheck";

    public static final String FUNC_UPDATEMETA = "updateMeta";

    public static final String FUNC_UPDATEMETAWITHMULTIKEY = "updateMetaWithMultiKey";

    public static final String FUNC_UPDATEMULTIMETAWITHOUTCHECK = "updateMultiMetaWithoutCheck";

    public static final String FUNC_UPDATETWOMETA = "updateTwoMeta";

    public static final String FUNC_UPDATETWOMETAWITHMULTIKEY = "updateTwoMetaWithMultiKey";

    public static final String FUNC_UPLOADMETA = "uploadMeta";

    public static final String FUNC_UPLOADMETAWITHOUTCHECK = "uploadMetaWithoutCheck";

    public static final Event DELEGATEJOBEVENT_EVENT = new Event("delegateJobEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event REMOVEMETAEVENT_EVENT = new Event("removeMetaEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATEMETAEVENT_EVENT = new Event("updateMetaEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPLOADMETAEVENT_EVENT = new Event("uploadMetaEvent",
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    protected PpcContractController(String contractAddress, Client client,
            CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<DelegateJobEventEventResponse> getDelegateJobEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DELEGATEJOBEVENT_EVENT, transactionReceipt);
        ArrayList<DelegateJobEventEventResponse> responses = new ArrayList<DelegateJobEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DelegateJobEventEventResponse typedResponse = new DelegateJobEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.jobId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.eventData = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<RemoveMetaEventEventResponse> getRemoveMetaEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEMETAEVENT_EVENT, transactionReceipt);
        ArrayList<RemoveMetaEventEventResponse> responses = new ArrayList<RemoveMetaEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RemoveMetaEventEventResponse typedResponse = new RemoveMetaEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tableName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.metaKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UpdateMetaEventEventResponse> getUpdateMetaEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEMETAEVENT_EVENT, transactionReceipt);
        ArrayList<UpdateMetaEventEventResponse> responses = new ArrayList<UpdateMetaEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateMetaEventEventResponse typedResponse = new UpdateMetaEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tableName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.metaKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.metaValue = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public List<UploadMetaEventEventResponse> getUploadMetaEventEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPLOADMETAEVENT_EVENT, transactionReceipt);
        ArrayList<UploadMetaEventEventResponse> responses = new ArrayList<UploadMetaEventEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UploadMetaEventEventResponse typedResponse = new UploadMetaEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tableName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.metaKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.metaValue = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public String ERROR_OTHER() throws ContractException {
        final Function function = new Function(FUNC_ERROR_OTHER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt delegateJob(String jobId, String eventData) {
        final Function function = new Function(
                FUNC_DELEGATEJOB,
                Arrays.<Type>asList(new Utf8String(jobId),
                new Utf8String(eventData)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return executeTransaction(function);
    }

    public String getSignedTransactionForDelegateJob(String jobId, String eventData) {
        final Function function = new Function(
                FUNC_DELEGATEJOB,
                Arrays.<Type>asList(new Utf8String(jobId),
                new Utf8String(eventData)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return createSignedTransaction(function);
    }

    public String delegateJob(String jobId, String eventData, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELEGATEJOB,
                Arrays.<Type>asList(new Utf8String(jobId),
                new Utf8String(eventData)),
                Collections.<TypeReference<?>>emptyList(), 4);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getDelegateJobInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELEGATEJOB,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public String getTableNameContract(String tableName) throws ContractException {
        final Function function = new Function(FUNC_GETTABLENAMECONTRACT,
                Arrays.<Type>asList(new Utf8String(tableName)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String queryMeta(String tableName, String metaKey) throws ContractException {
        final Function function = new Function(FUNC_QUERYMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt removeMeta(String tableName, String metaKey) {
        final Function function = new Function(
                FUNC_REMOVEMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRemoveMeta(String tableName, String metaKey) {
        final Function function = new Function(
                FUNC_REMOVEMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String removeMeta(String tableName, String metaKey, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, String> getRemoveMetaInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEMETA,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue()
                );
    }

    public TransactionReceipt removeMetaWithMultiKey(String tableName, List<String> metaKeyList) {
        final Function function = new Function(
                FUNC_REMOVEMETAWITHMULTIKEY,
                Arrays.<Type>asList(new Utf8String(tableName),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForRemoveMetaWithMultiKey(String tableName,
            List<String> metaKeyList) {
        final Function function = new Function(
                FUNC_REMOVEMETAWITHMULTIKEY,
                Arrays.<Type>asList(new Utf8String(tableName),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String removeMetaWithMultiKey(String tableName, List<String> metaKeyList,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEMETAWITHMULTIKEY,
                Arrays.<Type>asList(new Utf8String(tableName),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple2<String, List<String>> getRemoveMetaWithMultiKeyInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEMETAWITHMULTIKEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(

                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue())
                );
    }

    public TransactionReceipt updateAndRemoveMultiMetaWithoutCheck(String tableName1,
            String tableName2, List<String> metaKeyList, List<String> metaValueList) {
        final Function function = new Function(
                FUNC_UPDATEANDREMOVEMULTIMETAWITHOUTCHECK,
                Arrays.<Type>asList(new Utf8String(tableName1),
                new Utf8String(tableName2),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaValueList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdateAndRemoveMultiMetaWithoutCheck(String tableName1,
            String tableName2, List<String> metaKeyList, List<String> metaValueList) {
        final Function function = new Function(
                FUNC_UPDATEANDREMOVEMULTIMETAWITHOUTCHECK,
                Arrays.<Type>asList(new Utf8String(tableName1),
                new Utf8String(tableName2),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaValueList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String updateAndRemoveMultiMetaWithoutCheck(String tableName1, String tableName2,
            List<String> metaKeyList, List<String> metaValueList, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEANDREMOVEMULTIMETAWITHOUTCHECK,
                Arrays.<Type>asList(new Utf8String(tableName1),
                new Utf8String(tableName2),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaValueList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple4<String, String, List<String>, List<String>> getUpdateAndRemoveMultiMetaWithoutCheckInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEANDREMOVEMULTIMETAWITHOUTCHECK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, List<String>, List<String>>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue())
                );
    }

    public TransactionReceipt updateMeta(String tableName, String metaKey, String metaValue) {
        final Function function = new Function(
                FUNC_UPDATEMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey),
                new Utf8String(metaValue)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdateMeta(String tableName, String metaKey,
            String metaValue) {
        final Function function = new Function(
                FUNC_UPDATEMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey),
                new Utf8String(metaValue)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String updateMeta(String tableName, String metaKey, String metaValue,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey),
                new Utf8String(metaValue)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, String, String> getUpdateMetaInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEMETA,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt updateMetaWithMultiKey(String tableName, List<String> metaKeyList,
            List<String> metaValueList) {
        final Function function = new Function(
                FUNC_UPDATEMETAWITHMULTIKEY,
                Arrays.<Type>asList(new Utf8String(tableName),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaValueList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdateMetaWithMultiKey(String tableName,
            List<String> metaKeyList, List<String> metaValueList) {
        final Function function = new Function(
                FUNC_UPDATEMETAWITHMULTIKEY,
                Arrays.<Type>asList(new Utf8String(tableName),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaValueList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String updateMetaWithMultiKey(String tableName, List<String> metaKeyList,
            List<String> metaValueList, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEMETAWITHMULTIKEY,
                Arrays.<Type>asList(new Utf8String(tableName),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaValueList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, List<String>, List<String>> getUpdateMetaWithMultiKeyInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEMETAWITHMULTIKEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<String>, List<String>>(

                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue())
                );
    }

    public TransactionReceipt updateMultiMetaWithoutCheck(String tableName,
            List<String> metaKeyList, List<String> metaValueList) {
        final Function function = new Function(
                FUNC_UPDATEMULTIMETAWITHOUTCHECK,
                Arrays.<Type>asList(new Utf8String(tableName),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaValueList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdateMultiMetaWithoutCheck(String tableName,
            List<String> metaKeyList, List<String> metaValueList) {
        final Function function = new Function(
                FUNC_UPDATEMULTIMETAWITHOUTCHECK,
                Arrays.<Type>asList(new Utf8String(tableName),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaValueList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String updateMultiMetaWithoutCheck(String tableName, List<String> metaKeyList,
            List<String> metaValueList, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEMULTIMETAWITHOUTCHECK,
                Arrays.<Type>asList(new Utf8String(tableName),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaValueList, Utf8String.class))),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, List<String>, List<String>> getUpdateMultiMetaWithoutCheckInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEMULTIMETAWITHOUTCHECK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, List<String>, List<String>>(

                (String) results.get(0).getValue(),
                convertToNative((List<Utf8String>) results.get(1).getValue()),
                convertToNative((List<Utf8String>) results.get(2).getValue())
                );
    }

    public TransactionReceipt updateTwoMeta(String tableName1, String tableName2, String metaKey1,
            String metaKey2, String metaValue1, String metaValue2) {
        final Function function = new Function(
                FUNC_UPDATETWOMETA,
                Arrays.<Type>asList(new Utf8String(tableName1),
                new Utf8String(tableName2),
                new Utf8String(metaKey1),
                new Utf8String(metaKey2),
                new Utf8String(metaValue1),
                new Utf8String(metaValue2)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdateTwoMeta(String tableName1, String tableName2,
            String metaKey1, String metaKey2, String metaValue1, String metaValue2) {
        final Function function = new Function(
                FUNC_UPDATETWOMETA,
                Arrays.<Type>asList(new Utf8String(tableName1),
                new Utf8String(tableName2),
                new Utf8String(metaKey1),
                new Utf8String(metaKey2),
                new Utf8String(metaValue1),
                new Utf8String(metaValue2)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String updateTwoMeta(String tableName1, String tableName2, String metaKey1,
            String metaKey2, String metaValue1, String metaValue2, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATETWOMETA,
                Arrays.<Type>asList(new Utf8String(tableName1),
                new Utf8String(tableName2),
                new Utf8String(metaKey1),
                new Utf8String(metaKey2),
                new Utf8String(metaValue1),
                new Utf8String(metaValue2)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple6<String, String, String, String, String, String> getUpdateTwoMetaInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATETWOMETA,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, String, String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue(),
                (String) results.get(3).getValue(),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue()
                );
    }

    public TransactionReceipt updateTwoMetaWithMultiKey(String tableName1, String tableName2,
            List<String> metaKeyList1, List<String> metaKeyList2, String metaValue1,
            String metaValue2) {
        final Function function = new Function(
                FUNC_UPDATETWOMETAWITHMULTIKEY,
                Arrays.<Type>asList(new Utf8String(tableName1),
                new Utf8String(tableName2),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList1, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList2, Utf8String.class)),
                new Utf8String(metaValue1),
                new Utf8String(metaValue2)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUpdateTwoMetaWithMultiKey(String tableName1,
            String tableName2, List<String> metaKeyList1, List<String> metaKeyList2,
            String metaValue1, String metaValue2) {
        final Function function = new Function(
                FUNC_UPDATETWOMETAWITHMULTIKEY,
                Arrays.<Type>asList(new Utf8String(tableName1),
                new Utf8String(tableName2),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList1, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList2, Utf8String.class)),
                new Utf8String(metaValue1),
                new Utf8String(metaValue2)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String updateTwoMetaWithMultiKey(String tableName1, String tableName2,
            List<String> metaKeyList1, List<String> metaKeyList2, String metaValue1,
            String metaValue2, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATETWOMETAWITHMULTIKEY,
                Arrays.<Type>asList(new Utf8String(tableName1),
                new Utf8String(tableName2),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList1, Utf8String.class)),
                new DynamicArray<Utf8String>(
                        Utf8String.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(metaKeyList2, Utf8String.class)),
                new Utf8String(metaValue1),
                new Utf8String(metaValue2)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple6<String, String, List<String>, List<String>, String, String> getUpdateTwoMetaWithMultiKeyInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATETWOMETAWITHMULTIKEY,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple6<String, String, List<String>, List<String>, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                convertToNative((List<Utf8String>) results.get(2).getValue()),
                convertToNative((List<Utf8String>) results.get(3).getValue()),
                (String) results.get(4).getValue(),
                (String) results.get(5).getValue()
                );
    }

    public TransactionReceipt uploadMeta(String tableName, String metaKey, String metaValue) {
        final Function function = new Function(
                FUNC_UPLOADMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey),
                new Utf8String(metaValue)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUploadMeta(String tableName, String metaKey,
            String metaValue) {
        final Function function = new Function(
                FUNC_UPLOADMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey),
                new Utf8String(metaValue)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String uploadMeta(String tableName, String metaKey, String metaValue,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADMETA,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey),
                new Utf8String(metaValue)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, String, String> getUploadMetaInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADMETA,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue()
                );
    }

    public TransactionReceipt uploadMetaWithoutCheck(String tableName, String metaKey,
            String metaValue) {
        final Function function = new Function(
                FUNC_UPLOADMETAWITHOUTCHECK,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey),
                new Utf8String(metaValue)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public String getSignedTransactionForUploadMetaWithoutCheck(String tableName, String metaKey,
            String metaValue) {
        final Function function = new Function(
                FUNC_UPLOADMETAWITHOUTCHECK,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey),
                new Utf8String(metaValue)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String uploadMetaWithoutCheck(String tableName, String metaKey, String metaValue,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPLOADMETAWITHOUTCHECK,
                Arrays.<Type>asList(new Utf8String(tableName),
                new Utf8String(metaKey),
                new Utf8String(metaValue)),
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, String, String> getUploadMetaWithoutCheckInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPLOADMETAWITHOUTCHECK,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue()
                );
    }

    public static PpcContractController load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new PpcContractController(contractAddress, client, credential);
    }

    public static PpcContractController deploy(Client client, CryptoKeyPair credential,
            String d_dataset_address, String d_authorization_address,
            String d_authorization_request_address, String d_algorithm_address,
            String d_job_audit_address, String d_agency_address, String d_dataset_job_address,
            String d_algorithm_job_address) throws ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(d_dataset_address),
                new Address(d_authorization_address),
                new Address(d_authorization_request_address),
                new Address(d_algorithm_address),
                new Address(d_job_audit_address),
                new Address(d_agency_address),
                new Address(d_dataset_job_address),
                new Address(d_algorithm_job_address)));
        return deploy(PpcContractController.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }

    public static class DelegateJobEventEventResponse {
        public TransactionReceipt.Logs log;

        public String jobId;

        public String eventData;
    }

    public static class RemoveMetaEventEventResponse {
        public TransactionReceipt.Logs log;

        public String tableName;

        public String metaKey;
    }

    public static class UpdateMetaEventEventResponse {
        public TransactionReceipt.Logs log;

        public String tableName;

        public String metaKey;

        public String metaValue;
    }

    public static class UploadMetaEventEventResponse {
        public TransactionReceipt.Logs log;

        public String tableName;

        public String metaKey;

        public String metaValue;
    }
}
