package com.webank.wedpr.zktransfer.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.abi.FunctionEncoder;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple7;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class ZkTransfer extends Contract {
    public static final String[] BINARY_ARRAY = {"","9450508080610f6a906115ae565b915050610f03565b50508080610f7f906115ae565b915050610ed9565b5090949350505050565b828054610f9d90611602565b90600052602060002090601f016020900481019282610fbf5760008555611005565b82601f10610fd857805160ff1916838001178555611005565b82800160010185558215611005579182015b82811115611005578251825591602001919060010190610fea565b50611011929150611015565b5090565b5b808211156110115760008155600101611016565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156110685761106861102a565b604052919050565b600082601f83011261108157600080fd5b81356001600160401b0381111561109a5761109a61102a565b6110ad601f8201601f1916602001611040565b8181528460208386010111156110c257600080fd5b816020850160208301376000918101602001919091529392505050565b80356001600160401b03811681146110f657600080fd5b919050565b600080600080600060a0868803121561111357600080fd5b85356001600160401b038082111561112a57600080fd5b61113689838a01611070565b9650602088013591508082111561114c57600080fd5b61115889838a01611070565b9550604088013591508082111561116e57600080fd5b61117a89838a01611070565b9450606088013591508082111561119057600080fd5b5061119d88828901611070565b9250506111ac608087016110df565b90509295509295909350565b600082601f8301126111c957600080fd5b813560206001600160401b03808311156111e5576111e561102a565b8260051b6111f4838201611040565b938452858101830193838101908886111561120e57600080fd5b84880192505b8583101561124a5782358481111561122c5760008081fd5b61123a8a87838c0101611070565b8352509184019190840190611214565b98975050505050505050565b6000806000806080858703121561126c57600080fd5b84356001600160401b038082111561128357600080fd5b61128f888389016111b8565b955060208701359150808211156112a557600080fd5b506112b287828801611070565b9350506112c1604086016110df565b915060608501356001600160a01b03811681146112dd57600080fd5b939692955090935050565b600080600080600080600060e0888a03121561130357600080fd5b87356001600160401b038082111561131a57600080fd5b6113268b838c016111b8565b985060208a013591508082111561133c57600080fd5b6113488b838c016111b8565b975060408a013591508082111561135e57600080fd5b61136a8b838c016111b8565b965060608a013591508082111561138057600080fd5b61138c8b838c016111b8565b955060808a01359150808211156113a257600080fd5b6113ae8b838c01611070565b945060a08a01359150808211156113c457600080fd5b6113d08b838c016111b8565b935060c08a01359150808211156113e657600080fd5b506113f38a828b016111b8565b91505092959891949750929550565b60006020828403121561141457600080fd5b5051919050565b60005b8381101561143657818101518382015260200161141e565b83811115610d795750506000910152565b6000815180845261145f81602086016020860161141b565b601f01601f19169290920160200192915050565b6001600160401b03841681526060602082015260006114956060830185611447565b82810360408401526114a78185611447565b9695505050505050565b6000602082840312156114c357600080fd5b815180151581146114d357600080fd5b9392505050565b60208082526028908201527f56616c756520657175616c6974792070726f6f6620766572696669636174696f6040820152671b8819985a5b195960c21b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6000825161154a81846020870161141b565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b60408152600061157d6040830185611447565b828103602084015261158f8185611447565b95945050505050565b634e487b7160e01b600052601160045260246000fd5b60006000198214156115c2576115c2611598565b5060010190565b6060815260006115dc6060830186611447565b82810360208401526115ee8186611447565b905082810360408401526114a78185611447565b600181811c9082168061161657607f821691505b6020821081141561163757634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061165957607f831692505b602080841082141561167957634e487b7160e01b86526022600452602486fd5b81801561168d576001811461169e576116cb565b60ff198616895284890196506116cb565b60008a81526020902060005b868110156116c35781548b8201529085019083016116aa565b505084890196505b509498975050505050505050565b600082198211156116ec576116ec611598565b50019056fea264697066735822122053244c5dd7268681bc2c713c70afd4e824eda6f98842cd241c4804969adeb96c64736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","8160001a90535083610f6d816115bf565b9450508080610f7b906115bf565b915050610f14565b50508080610f90906115bf565b915050610eea565b5090949350505050565b828054610fae90611613565b90600052602060002090601f016020900481019282610fd05760008555611016565b82601f10610fe957805160ff1916838001178555611016565b82800160010185558215611016579182015b82811115611016578251825591602001919060010190610ffb565b50611022929150611026565b5090565b5b808211156110225760008155600101611027565b63b95aa35560e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156110795761107961103b565b604052919050565b600082601f83011261109257600080fd5b81356001600160401b038111156110ab576110ab61103b565b6110be601f8201601f1916602001611051565b8181528460208386010111156110d357600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261110157600080fd5b813560206001600160401b038083111561111d5761111d61103b565b8260051b61112c838201611051565b938452858101830193838101908886111561114657600080fd5b84880192505b85831015611182578235848111156111645760008081fd5b6111728a87838c0101611081565b835250918401919084019061114c565b98975050505050505050565b80356001600160401b03811681146111a557600080fd5b919050565b600080600080608085870312156111c057600080fd5b84356001600160401b03808211156111d757600080fd5b6111e3888389016110f0565b955060208701359150808211156111f957600080fd5b5061120687828801611081565b9350506112156040860161118e565b915060608501356001600160a01b038116811461123157600080fd5b939692955090935050565b600080600080600060a0868803121561125457600080fd5b85356001600160401b038082111561126b57600080fd5b61127789838a01611081565b9650602088013591508082111561128d57600080fd5b61129989838a01611081565b955060408801359150808211156112af57600080fd5b6112bb89838a01611081565b945060608801359150808211156112d157600080fd5b506112de88828901611081565b9250506112ed6080870161118e565b90509295509295909350565b600080600080600080600060e0888a03121561131457600080fd5b87356001600160401b038082111561132b57600080fd5b6113378b838c016110f0565b985060208a013591508082111561134d57600080fd5b6113598b838c016110f0565b975060408a013591508082111561136f57600080fd5b61137b8b838c016110f0565b965060608a013591508082111561139157600080fd5b61139d8b838c016110f0565b955060808a01359150808211156113b357600080fd5b6113bf8b838c01611081565b945060a08a01359150808211156113d557600080fd5b6113e18b838c016110f0565b935060c08a01359150808211156113f757600080fd5b506114048a828b016110f0565b91505092959891949750929550565b63b95aa35560e01b600052602160045260246000fd5b60005b8381101561144457818101518382015260200161142c565b83811115610e4f5750506000910152565b60008251611467818460208701611429565b9190910192915050565b63b95aa35560e01b600052603260045260246000fd5b6000815180845261149f816020860160208601611429565b601f01601f19169290920160200192915050565b6001600160401b03841681526060602082015260006114d56060830185611487565b82810360408401526114e78185611487565b9695505050505050565b60006020828403121561150357600080fd5b8151801515811461151357600080fd5b9392505050565b60208082526028908201527f56616c756520657175616c6974792070726f6f6620766572696669636174696f6040820152671b8819985a5b195960c21b606082015260800190565b6040815260006115756040830185611487565b82810360208401526115878185611487565b95945050505050565b6000602082840312156115a257600080fd5b5051919050565b63b95aa35560e01b600052601160045260246000fd5b60006000198214156115d3576115d36115a9565b5060010190565b6060815260006115ed6060830186611487565b82810360208401526115ff8186611487565b905082810360408401526114e78185611487565b600181811c9082168061162757607f821691505b602082108114156116485763b95aa35560e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061166a57607f831692505b602080841082141561168a5763b95aa35560e01b86526022600452602486fd5b81801561169e57600181146116af576116dc565b60ff198616895284890196506116dc565b60008a81526020902060005b868110156116d45781548b8201529085019083016116bb565b505084890196505b509498975050505050505050565b600082198211156116fd576116fd6115a9565b50019056fea264697066735822122002d4d05a853078a43933e3d043acf3dac95f69436f9ad479a7a200a5480f2b1c64736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proof\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"commitment\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[],\"selector\":[1917191224,1307836225],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"commitment\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"viewKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"cipher\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"mint\",\"outputs\":[],\"selector\":[1474505867,2244821246],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"intputCommitments\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"outputCommitments\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"outputViewKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"outputNoteCiphers\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"relationshipProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"knowledgeProofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"rangeProofs\",\"type\":\"bytes[]\"}],\"name\":\"transfer\",\"outputs\":[],\"selector\":[2882492154,4068219447],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_BURN = "burn";

    public static final String FUNC_MINT = "mint";

    public static final String FUNC_TRANSFER = "transfer";

    protected ZkTransfer(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public TransactionReceipt burn(List<byte[]> proof, byte[] commitment, BigInteger value,
            String account) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(proof, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(commitment), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64(value), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodBurnRawFunction(List<byte[]> proof, byte[] commitment,
            BigInteger value, String account) throws ContractException {
        final Function function = new Function(FUNC_BURN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(proof, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(commitment), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64(value), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForBurn(List<byte[]> proof, byte[] commitment,
            BigInteger value, String account) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(proof, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(commitment), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64(value), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String burn(List<byte[]> proof, byte[] commitment, BigInteger value, String account,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_BURN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(proof, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(commitment), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64(value), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple4<List<byte[]>, byte[], BigInteger, String> getBurnInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_BURN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint64>() {}, new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<List<byte[]>, byte[], BigInteger, String>(

                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                (byte[]) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public TransactionReceipt mint(byte[] proof, byte[] commitment, byte[] viewKey, byte[] cipher,
            BigInteger value) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(proof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(commitment), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(viewKey), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(cipher), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64(value)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodMintRawFunction(byte[] proof, byte[] commitment, byte[] viewKey,
            byte[] cipher, BigInteger value) throws ContractException {
        final Function function = new Function(FUNC_MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(proof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(commitment), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(viewKey), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(cipher), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64(value)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForMint(byte[] proof, byte[] commitment, byte[] viewKey,
            byte[] cipher, BigInteger value) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(proof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(commitment), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(viewKey), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(cipher), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64(value)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String mint(byte[] proof, byte[] commitment, byte[] viewKey, byte[] cipher,
            BigInteger value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_MINT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(proof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(commitment), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(viewKey), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(cipher), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint64(value)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple5<byte[], byte[], byte[], byte[], BigInteger> getMintInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_MINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint64>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple5<byte[], byte[], byte[], byte[], BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue(), 
                (byte[]) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue()
                );
    }

    public TransactionReceipt transfer(List<byte[]> intputCommitments,
            List<byte[]> outputCommitments, List<byte[]> outputViewKeys,
            List<byte[]> outputNoteCiphers, byte[] relationshipProof, List<byte[]> knowledgeProofs,
            List<byte[]> rangeProofs) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(intputCommitments, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputCommitments, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputViewKeys, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputNoteCiphers, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(relationshipProof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(knowledgeProofs, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(rangeProofs, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodTransferRawFunction(List<byte[]> intputCommitments,
            List<byte[]> outputCommitments, List<byte[]> outputViewKeys,
            List<byte[]> outputNoteCiphers, byte[] relationshipProof, List<byte[]> knowledgeProofs,
            List<byte[]> rangeProofs) throws ContractException {
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(intputCommitments, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputCommitments, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputViewKeys, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputNoteCiphers, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(relationshipProof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(knowledgeProofs, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(rangeProofs, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class))), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForTransfer(List<byte[]> intputCommitments,
            List<byte[]> outputCommitments, List<byte[]> outputViewKeys,
            List<byte[]> outputNoteCiphers, byte[] relationshipProof, List<byte[]> knowledgeProofs,
            List<byte[]> rangeProofs) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(intputCommitments, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputCommitments, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputViewKeys, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputNoteCiphers, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(relationshipProof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(knowledgeProofs, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(rangeProofs, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String transfer(List<byte[]> intputCommitments, List<byte[]> outputCommitments,
            List<byte[]> outputViewKeys, List<byte[]> outputNoteCiphers, byte[] relationshipProof,
            List<byte[]> knowledgeProofs, List<byte[]> rangeProofs, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(intputCommitments, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputCommitments, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputViewKeys, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(outputNoteCiphers, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes(relationshipProof), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(knowledgeProofs, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray<org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class,
                        org.fisco.bcos.sdk.v3.codec.Utils.typeMap(rangeProofs, org.fisco.bcos.sdk.v3.codec.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple7<List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, byte[], List<byte[]>, List<byte[]>> getTransferInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple7<List<byte[]>, List<byte[]>, List<byte[]>, List<byte[]>, byte[], List<byte[]>, List<byte[]>>(

                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(1).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(2).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(3).getValue()), 
                (byte[]) results.get(4).getValue(), 
                convertToNative((List<DynamicBytes>) results.get(5).getValue()), 
                convertToNative((List<DynamicBytes>) results.get(6).getValue())
                );
    }

    public static ZkTransfer load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new ZkTransfer(contractAddress, client, credential);
    }

    public static ZkTransfer deploy(Client client, CryptoKeyPair credential, String erc20) throws
            ContractException {
        byte[] encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(erc20)));
        return deploy(ZkTransfer.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), encodedConstructor, null);
    }
}
